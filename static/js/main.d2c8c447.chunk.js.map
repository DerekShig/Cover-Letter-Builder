{"version":3,"sources":["form.js","output.js","name.js","position.js","layout2.js","company.js","project.js","App.js","serviceWorker.js","index.js"],"names":["form","props","for","id","type","onChange","name","value","val","output","className","text","names","titles","company","experience","input","position","layoutTwo","project","App","state","info","recipient","title","condition","e","setState","target","myName","companyName","this","onClick","handleClick","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2c8c447.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst form = (props) => {\r\n\treturn (\r\n\t\t<div>\r\n\r\n\t\t\t<label  for=\"Recipient\">Recipient: </label>\r\n\t\t\t<input id=\"Recipient\" type=\"text\" onChange={props.name} value={props.val}/>\r\n\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default form;","import React from 'react';\r\n\r\n\r\nconst output = (props) => {\r\n\treturn (\r\n\t\t<div className=\"letter\">\r\n\r\n\t\t\t<p>To {props.text}</p>\r\n\r\n\t\t\t<p>Hi, my name is {props.names} and I am writing to express my interest in the {props.titles} position at {props.company}. \r\n\t\t\tI would love to contribute to {props.company} because I resonate with the company culture and mission.</p>\r\n\r\n\t\t\t<p>As part of your team, I believe I can be an effective member of the company. In the past, \r\n\t\t\tI've worked on many different development projects. {props.experience}</p>\r\n\r\n\t\t\t<p>Web development is my passion, and I would love an opportunity to work at {props.company}. \r\n\t\t\tI look forward to discussing this opportunity further with you.</p>\r\n\r\n\t\t\t<p>Best,</p>\r\n\r\n\t\t\t<p>{props.names}</p>\r\n\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default output;","import React from 'react';\r\n\r\n\r\nconst name = (props) => {\r\n\treturn (\r\n\r\n\t\t<div>\r\n\r\n\t\t\t<label  for=\"name\">Name: </label>\r\n\t\t\t<input id=\"name\" type=\"text\" onChange={props.input} value={props.val}/>\r\n\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default name;","import React from 'react';\r\n\r\n\r\nconst position = (props) => {\r\n\treturn (\r\n\t\t<div>\r\n\r\n\t\t\t<label  for=\"position\">Position/Title: </label>\r\n\t\t\t<input id=\"position\" type=\"text\" onChange={props.name} value={props.val}/>\r\n\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default position;","import React from 'react';\r\n\r\n\r\nconst layoutTwo = (props) => {\r\n\treturn (\r\n\t\t<div className=\"letter\">\r\n\r\n\t\t\t<p>Dear {props.text}</p>\r\n\r\n\t\t\t<p>Hi! My name is {props.names} and I am interested in joining your team for the {props.titles} position at your company! \r\n\t\t\tI'm applying because the engineers at {props.company} are smart and solve very challenging problems. I'd love to be part of {props.company}'s \r\n\t\t\tinnovation and work with your talented team.</p>\r\n\r\n\t\t\t<p>I beleive I have accumulated a skill set that I can use to contribute to meaningful projects at {props.company}. {props.experience}</p>\r\n\r\n\t\t\t<p>I am really passionate about this field of work, and I would love a chance to work at {props.company} to do great work. \r\n\t\t\tHope to hear from you soon to discuss this position futher!</p>\r\n\r\n\t\t\t<p>Kind regards,</p>\r\n\r\n\t\t\t<p>{props.names}</p>\r\n\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default layoutTwo;","import React from 'react';\r\n\r\n\r\nconst company = (props) => {\r\n\treturn (\r\n\t\t<div>\r\n\r\n\t\t\t<label  for=\"company\">Company: </label>\r\n\t\t\t<input id=\"company\" type=\"text\" onChange={props.name} value={props.val}/>\r\n\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default company;","import React from 'react';\r\n\r\n\r\nconst project = (props) => {\r\n\treturn (\r\n\r\n\t\t<div>\r\n\r\n\t\t\t<label  for=\"project\">Experience: </label>\r\n\t\t\t\r\n\t\t\t<textarea id=\"project\" type=\"text\" onChange={props.name} value={props.val}></textarea>\r\n\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default project;\r\n//<input id=\"project\" type=\"text\" onChange={props.name} value={props.val}/>","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './form.js';\nimport Output from './output.js';\nimport Name from './name.js';\nimport Position from './position.js';\nimport LayoutTwo from './layout2.js'\nimport Company from './company.js'\nimport Project from './project.js'\n\n\nclass App extends Component {\n\n  state = {\n    info: [\n      { \n        recipient: \"John Smith\",\n        name: \"Derek\",\n        title: \"web developer\",\n        company: \"Google\",\n        experience: \"My most recent project involved developing a new website for Jelka Seals Limited. I was responsible for the entire development process, from planning and the design stage to coding the front end using best practices.\" \n      }\n    ],\n    condition: true\n  } \n\n\n  handleClick(condition) {\n    this.setState( { condition } )\n  }\n\n  name = (e) => {\n    this.setState({ info: [\n        { ...this.state.info[0], recipient: e.target.value }\n      ] \n    })    \n  }\n\n  myName = (e) => {\n    this.setState({ info: [\n        { ...this.state.info[0], name: e.target.value }\n      ] \n    })    \n  }  \n\n  title = (e) => {\n    this.setState({ info: [\n        { ...this.state.info[0], title: e.target.value }\n      ] \n    })    \n  }  \n\n  companyName = (e) => {\n    this.setState({ info: [\n        { ...this.state.info[0], company: e.target.value }\n      ] \n    })    \n  }    \n\n  experience = (e) => {\n    this.setState({ info: [\n        { ...this.state.info[0], experience: e.target.value }\n      ] \n    })    \n  }    \n   \n  render(){\n    const { condition } = this.state;\n    return (\n      <div>\n\n       <div className=\"header\">\n         <h1>Cover Letter Builder</h1>\n         <p>Tired of writing new cover letters for each job application? Fill out the form below and have a custom cover letter ready for any job!</p>\n       </div>  \n\n       <div className=\"everything\">\n         <div className=\"input\">\n           <div className=\"form\">\n             <Form name={ this.name } val={this.state.info[0].recipient}/>\n             <Name input={ this.myName } val={this.state.info[0].name}/>\n             <Position name={ this.title } val={this.state.info[0].title}/>\n             <Company name={this.companyName} val={this.state.info[0].company}/>\n             <Project name={this.experience} val={this.state.info[0].experience}/>\n           </div>  \n           <div className=\"buttons\">        \n             <button onClick={() => this.handleClick(true)}>Layout 1</button>\n             <button onClick={() => this.handleClick(false)}>Layout 2</button>\n           </div>\n         </div>\n         <div className=\"output\">\n           {condition === true ? <Output text={this.state.info[0].recipient} names={this.state.info[0].name} titles={this.state.info[0].title} company={this.state.info[0].company} experience={this.state.info[0].experience}/> \n           : <LayoutTwo text={ this.state.info[0].recipient } names={ this.state.info[0].name } titles={ this.state.info[0].title } company={this.state.info[0].company} experience={this.state.info[0].experience}/>}\n         </div>\n       </div>\n\n       <div className=\"footer\">\n         <hr/>\n         <p>Made by <a href=\"https://www.derekshigetomi.com/\" target=\"_blank\">Derek Shigetomi</a></p>\n       </div>\n\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}